name = "gptx-api"
main = "src/index.ts"
compatibility_date = "2023-10-30"
routes = ["gptx.acrylicstyle.xyz/api/*"]

[triggers]
crons = ["* * * * *", "*/5 * * * *", "*/30 * * * *", "0 0 * * *"]

# Variable bindings. These are arbitrary, plaintext strings (similar to environment variables)
# Note: Use secrets to store sensitive data.
# Docs: https://developers.cloudflare.com/workers/platform/environment-variables
[vars]
#DISCORD_REDIRECT_URL = "http://localhost:8787/api/callback/discord"
DISCORD_REDIRECT_URL = "https://gptx.acrylicstyle.xyz/api/callback/discord"
DISCORD_REGISTER_COMMANDS = false
REQUIRE_INVITE = true

# Bind a KV Namespace. Use KV as persistent storage for small key-value pairs.
# Docs: https://developers.cloudflare.com/workers/runtime-apis/kv
[[kv_namespaces]]
binding = "KV_GITHUB"
id = "c42eb6f0808544a29a8e185ebf729c71"

[[kv_namespaces]]
binding = "KV_DISCORD"
id = "1deb0fb8a4f7420c8d6630279c31f920"

[[kv_namespaces]]
binding = "KV_USERS"
id = "3554c69de2e24b2caae2baa53c064a47"

[[kv_namespaces]]
binding = "KV_SESSIONS"
id = "982d9ebd59cc4629ac5d1d4a763fa75c"

[[kv_namespaces]]
binding = "KV_INVITE_CODES"
id = "f69eeb149fa742a6947e9b0d985c2e25"

# Bind an R2 Bucket. Use R2 to store arbitrarily large blobs of data, such as files.
# Docs: https://developers.cloudflare.com/r2/api/workers/workers-api-usage/
# [[r2_buckets]]
# binding = "MY_BUCKET"
# bucket_name = "my-bucket"

# Bind a Queue producer. Use this binding to schedule an arbitrary task that may be processed later by a Queue consumer.
# Docs: https://developers.cloudflare.com/queues/get-started
# [[queues.producers]]
# binding = "MY_QUEUE"
# queue = "my-queue"

# Bind a Queue consumer. Queue Consumers can retrieve tasks scheduled by Producers to act on them.
# Docs: https://developers.cloudflare.com/queues/get-started
# [[queues.consumers]]
# queue = "my-queue"

# Bind another Worker service. Use this binding to call another Worker without network overhead.
# Docs: https://developers.cloudflare.com/workers/platform/services
# [[services]]
# binding = "MY_SERVICE"
# service = "my-service"

# Bind a Durable Object. Durable objects are a scale-to-zero compute primitive based on the actor model.
# Durable Objects can live for as long as needed. Use these when you need a long-running "server", such as in realtime apps.
# Docs: https://developers.cloudflare.com/workers/runtime-apis/durable-objects
# [[durable_objects.bindings]]
# name = "MY_DURABLE_OBJECT"
# class_name = "MyDurableObject"

# Durable Object migrations.
# Docs: https://developers.cloudflare.com/workers/learning/using-durable-objects#configure-durable-object-classes-with-migrations
# [[migrations]]
# tag = "v1"
# new_classes = ["MyDurableObject"]
